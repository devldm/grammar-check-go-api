// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: solutions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSolution = `-- name: CreateSolution :one
INSERT INTO solutions (id, created_at, updated_at, grammar_id, user_id, solution, grammar)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, grammar_id, user_id, solution, grammar
`

type CreateSolutionParams struct {
	ID        uuid.UUID
	CreatedAt time.Time
	UpdatedAt time.Time
	GrammarID uuid.UUID
	UserID    uuid.UUID
	Solution  string
	Grammar   string
}

func (q *Queries) CreateSolution(ctx context.Context, arg CreateSolutionParams) (Solution, error) {
	row := q.db.QueryRowContext(ctx, createSolution,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.GrammarID,
		arg.UserID,
		arg.Solution,
		arg.Grammar,
	)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GrammarID,
		&i.UserID,
		&i.Solution,
		&i.Grammar,
	)
	return i, err
}

const deleteSolutionBySolutionId = `-- name: DeleteSolutionBySolutionId :exec
DELETE FROM solutions
WHERE id = $1
`

func (q *Queries) DeleteSolutionBySolutionId(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteSolutionBySolutionId, id)
	return err
}

const getHasUserSolved = `-- name: GetHasUserSolved :one
SELECT id, created_at, updated_at, grammar_id, user_id, solution, grammar FROM solutions
WHERE user_id = $1 AND grammar_id = $2
LIMIT 1
`

type GetHasUserSolvedParams struct {
	UserID    uuid.UUID
	GrammarID uuid.UUID
}

func (q *Queries) GetHasUserSolved(ctx context.Context, arg GetHasUserSolvedParams) (Solution, error) {
	row := q.db.QueryRowContext(ctx, getHasUserSolved, arg.UserID, arg.GrammarID)
	var i Solution
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.GrammarID,
		&i.UserID,
		&i.Solution,
		&i.Grammar,
	)
	return i, err
}

const getSolutions = `-- name: GetSolutions :many
SELECT id, created_at, updated_at, grammar_id, user_id, solution, grammar FROM solutions
LIMIT $1
`

func (q *Queries) GetSolutions(ctx context.Context, limit int32) ([]Solution, error) {
	rows, err := q.db.QueryContext(ctx, getSolutions, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Solution
	for rows.Next() {
		var i Solution
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GrammarID,
			&i.UserID,
			&i.Solution,
			&i.Grammar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsByGrammarIdWithUserData = `-- name: GetSolutionsByGrammarIdWithUserData :many
SELECT s.id, s.created_at, s.updated_at, s.grammar_id, s.user_id, s.solution, s.grammar, u.clerk_username, u.clerk_email, u.clerk_image, u.id AS user_id
FROM solutions s
JOIN users u ON s.user_id = u.id
WHERE s.grammar_id = $1
LIMIT $2
`

type GetSolutionsByGrammarIdWithUserDataParams struct {
	GrammarID uuid.UUID
	Limit     int32
}

type GetSolutionsByGrammarIdWithUserDataRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GrammarID     uuid.UUID
	UserID        uuid.UUID
	Solution      string
	Grammar       string
	ClerkUsername string
	ClerkEmail    string
	ClerkImage    string
	UserID_2      uuid.UUID
}

func (q *Queries) GetSolutionsByGrammarIdWithUserData(ctx context.Context, arg GetSolutionsByGrammarIdWithUserDataParams) ([]GetSolutionsByGrammarIdWithUserDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getSolutionsByGrammarIdWithUserData, arg.GrammarID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsByGrammarIdWithUserDataRow
	for rows.Next() {
		var i GetSolutionsByGrammarIdWithUserDataRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GrammarID,
			&i.UserID,
			&i.Solution,
			&i.Grammar,
			&i.ClerkUsername,
			&i.ClerkEmail,
			&i.ClerkImage,
			&i.UserID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsByUserId = `-- name: GetSolutionsByUserId :many
SELECT id, created_at, updated_at, grammar_id, user_id, solution, grammar FROM solutions 
WHERE user_id = $1
`

func (q *Queries) GetSolutionsByUserId(ctx context.Context, userID uuid.UUID) ([]Solution, error) {
	rows, err := q.db.QueryContext(ctx, getSolutionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Solution
	for rows.Next() {
		var i Solution
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GrammarID,
			&i.UserID,
			&i.Solution,
			&i.Grammar,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSolutionsWithUserData = `-- name: GetSolutionsWithUserData :many
SELECT s.id, s.created_at, s.updated_at, s.grammar_id, s.user_id, s.solution, s.grammar, u.clerk_username, u.clerk_email, u.clerk_image, u.id AS user_id
FROM solutions s
JOIN users u ON s.user_id = u.id
LIMIT $1
`

type GetSolutionsWithUserDataRow struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	GrammarID     uuid.UUID
	UserID        uuid.UUID
	Solution      string
	Grammar       string
	ClerkUsername string
	ClerkEmail    string
	ClerkImage    string
	UserID_2      uuid.UUID
}

func (q *Queries) GetSolutionsWithUserData(ctx context.Context, limit int32) ([]GetSolutionsWithUserDataRow, error) {
	rows, err := q.db.QueryContext(ctx, getSolutionsWithUserData, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSolutionsWithUserDataRow
	for rows.Next() {
		var i GetSolutionsWithUserDataRow
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.GrammarID,
			&i.UserID,
			&i.Solution,
			&i.Grammar,
			&i.ClerkUsername,
			&i.ClerkEmail,
			&i.ClerkImage,
			&i.UserID_2,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
