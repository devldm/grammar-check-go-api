// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, created_at, updated_at, clerk_id, clerk_username, clerk_email, clerk_image)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, created_at, updated_at, clerk_id, clerk_email, clerk_username, clerk_image
`

type CreateUserParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	ClerkID       string
	ClerkUsername string
	ClerkEmail    string
	ClerkImage    string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.ClerkID,
		arg.ClerkUsername,
		arg.ClerkEmail,
		arg.ClerkImage,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClerkID,
		&i.ClerkEmail,
		&i.ClerkUsername,
		&i.ClerkImage,
	)
	return i, err
}

const getUserByClerkId = `-- name: GetUserByClerkId :one
SELECT id, created_at, updated_at, clerk_id, clerk_email, clerk_username, clerk_image FROM users 
WHERE clerk_id = $1
`

func (q *Queries) GetUserByClerkId(ctx context.Context, clerkID string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByClerkId, clerkID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClerkID,
		&i.ClerkEmail,
		&i.ClerkUsername,
		&i.ClerkImage,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, clerk_id, clerk_email, clerk_username, clerk_image FROM users 
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClerkID,
		&i.ClerkEmail,
		&i.ClerkUsername,
		&i.ClerkImage,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, created_at, updated_at, clerk_id, clerk_email, clerk_username, clerk_image FROM users
LIMIT $1
`

func (q *Queries) GetUsers(ctx context.Context, limit int32) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers, limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ClerkID,
			&i.ClerkEmail,
			&i.ClerkUsername,
			&i.ClerkImage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
